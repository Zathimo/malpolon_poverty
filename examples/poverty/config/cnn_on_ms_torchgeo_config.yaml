hydra:
  run:
    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}

run:
  predict: false
  checkpoint_path:

data:
  num_classes: 1
  dataset_path: examples/poverty/dataset/
  labels_name: observation_2013+.csv
  train_batch_size: 64
  inference_batch_size: 64
  num_workers: 8
  val_split: 0.2
  test_split: 0.2
  dhs_folds: True

task:
  task: regression

trainer:
  accelerator: gpu
  devices: 1
  max_epochs: 3
  check_val_every_n_epoch: 1

model:
  provider_name: torchvision
  model_name: resnet18
  model_kwargs:
    weights: ResNet18_Weights.DEFAULT
    num_classes: null
    in_chans: null
    output_stride: null
    global_pool: null
  modifiers:
    change_first_convolutional_layer:
      num_input_channels: 7
    change_last_layer:
      num_outputs: 1

optim:
  optimizer:
    adamw: # ['adam', 'sgd', 'adamw', 'adadelta', 'adagrad', 'adamax', 'rmsprop']
      # callable: 'optim.SGD'
      kwargs:
        lr: 1e-4
        weight_decay: 1.0e-05
      scheduler: # Optional, delete key or leave empty to not use any learning rate scheduler
        reduce_lr_on_plateau:
          # callable: 'lr_scheduler.reduce_lr_on_plateau'
          kwargs:
            threshold: 0.001
          lr_scheduler_config:
            scheduler: reduce_lr_on_plateau  # Optional, the scheduler to use is the parent key
            monitor: loss/val  # ['loss/train', 'loss/val', '<metric>/train', '<metric>/val', ...]

  metrics:
    regression_R2score:
      callable: Fmetrics.regression.r2_score
      kwargs: null

miscellaneous:
  test
        
